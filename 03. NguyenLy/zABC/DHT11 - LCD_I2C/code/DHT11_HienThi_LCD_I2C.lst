CCS PCM C Compiler, Version 5.101, 43599               10-Nov-22 22:14

               Filename:   C:\Users\DangNgocNhan\Desktop\P3\ZABC\DHT11 - LCD_I2C\code\DHT11_HienThi_LCD_I2C.lst

               ROM used:   1089 words (13%)
                           Largest free fragment is 2048
               RAM used:   39 (11%) at main() level
                           58 (16%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   33C
0003:  NOP
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA D2,22
000D:  DATA 41,22
000E:  DATA 49,27
000F:  DATA 47,10
0010:  DATA 44,24
0011:  DATA D4,18
0012:  DATA 31,00
0013:  DATA C4,27
0014:  DATA A0,20
0015:  DATA 6D,1D
0016:  DATA A0,12
0017:  DATA 75,16
0018:  DATA A5,3A
0019:  DATA 00,00
001A:  DATA 4E,24
001B:  DATA C9,22
001C:  DATA 54,10
001D:  DATA 44,18
001E:  DATA 3A,10
001F:  DATA A5,3A
0020:  DATA AC,12
0021:  DATA 75,00
*
0220:  MOVF   0B,W
0221:  MOVWF  41
0222:  BCF    0B.7
0223:  BSF    03.5
0224:  BSF    03.6
0225:  BSF    0C.7
0226:  BSF    0C.0
0227:  NOP
0228:  NOP
0229:  BCF    03.5
022A:  BCF    03.6
022B:  BTFSC  41.7
022C:  BSF    0B.7
022D:  BSF    03.6
022E:  MOVF   0C,W
022F:  ANDLW  7F
0230:  BTFSC  03.2
0231:  GOTO   274
0232:  BCF    03.6
0233:  MOVWF  41
0234:  BSF    03.6
0235:  MOVF   0D,W
0236:  BCF    03.6
0237:  MOVWF  42
0238:  BSF    03.6
0239:  MOVF   0F,W
023A:  BCF    03.6
023B:  MOVWF  43
023C:  MOVF   41,W
023D:  MOVWF  44
023E:  CALL   1FB
023F:  MOVF   42,W
0240:  BSF    03.6
0241:  MOVWF  0D
0242:  BCF    03.6
0243:  MOVF   43,W
0244:  BSF    03.6
0245:  MOVWF  0F
0246:  BCF    03.6
0247:  MOVF   0B,W
0248:  MOVWF  44
0249:  BCF    0B.7
024A:  BSF    03.5
024B:  BSF    03.6
024C:  BSF    0C.7
024D:  BSF    0C.0
024E:  NOP
024F:  NOP
0250:  BCF    03.5
0251:  BCF    03.6
0252:  BTFSC  44.7
0253:  BSF    0B.7
0254:  BSF    03.6
0255:  RLF    0C,W
0256:  RLF    0E,W
0257:  ANDLW  7F
0258:  BTFSC  03.2
0259:  GOTO   274
025A:  BCF    03.6
025B:  MOVWF  41
025C:  BSF    03.6
025D:  MOVF   0D,W
025E:  BCF    03.6
025F:  MOVWF  42
0260:  BSF    03.6
0261:  MOVF   0F,W
0262:  BCF    03.6
0263:  MOVWF  43
0264:  MOVF   41,W
0265:  MOVWF  44
0266:  CALL   1FB
0267:  MOVF   42,W
0268:  BSF    03.6
0269:  MOVWF  0D
026A:  BCF    03.6
026B:  MOVF   43,W
026C:  BSF    03.6
026D:  MOVWF  0F
026E:  INCF   0D,F
026F:  BTFSC  03.2
0270:  INCF   0F,F
0271:  BCF    03.6
0272:  GOTO   220
0273:  BSF    03.6
0274:  BCF    03.6
0275:  BCF    0A.3
0276:  BCF    0A.4
0277:  GOTO   373 (RETURN)
0278:  MOVF   27,W
0279:  MOVWF  04
027A:  BCF    03.7
027B:  BTFSC  28.0
027C:  BSF    03.7
027D:  MOVF   45,W
027E:  MOVWF  00
027F:  INCF   04,F
0280:  CLRF   00
0281:  INCF   27,F
0282:  BTFSC  03.2
0283:  INCF   28,F
0284:  RETURN
0285:  MOVF   0B,W
0286:  MOVWF  42
0287:  BCF    0B.7
0288:  BSF    03.5
0289:  BSF    03.6
028A:  BSF    0C.7
028B:  BSF    0C.0
028C:  NOP
028D:  NOP
028E:  BCF    03.5
028F:  BCF    03.6
0290:  BTFSC  42.7
0291:  BSF    0B.7
0292:  BTFSC  03.0
0293:  GOTO   2BC
0294:  BSF    03.6
0295:  MOVF   0C,W
0296:  ANDLW  7F
0297:  BCF    03.6
0298:  MOVWF  42
0299:  BSF    03.6
029A:  MOVF   0D,W
029B:  BCF    03.6
029C:  MOVWF  43
029D:  BSF    03.6
029E:  MOVF   0F,W
029F:  BCF    03.6
02A0:  MOVWF  44
02A1:  MOVF   42,W
02A2:  MOVWF  45
02A3:  CALL   278
02A4:  MOVF   43,W
02A5:  BSF    03.6
02A6:  MOVWF  0D
02A7:  BCF    03.6
02A8:  MOVF   44,W
02A9:  BSF    03.6
02AA:  MOVWF  0F
02AB:  BCF    03.6
02AC:  MOVF   0B,W
02AD:  MOVWF  45
02AE:  BCF    0B.7
02AF:  BSF    03.5
02B0:  BSF    03.6
02B1:  BSF    0C.7
02B2:  BSF    0C.0
02B3:  NOP
02B4:  NOP
02B5:  BCF    03.5
02B6:  BCF    03.6
02B7:  BTFSC  45.7
02B8:  BSF    0B.7
02B9:  DECFSZ 41,F
02BA:  GOTO   2BC
02BB:  GOTO   2DB
02BC:  BSF    03.6
02BD:  RLF    0C,W
02BE:  RLF    0E,W
02BF:  ANDLW  7F
02C0:  BCF    03.6
02C1:  MOVWF  42
02C2:  BSF    03.6
02C3:  MOVF   0D,W
02C4:  BCF    03.6
02C5:  MOVWF  43
02C6:  BSF    03.6
02C7:  MOVF   0F,W
02C8:  BCF    03.6
02C9:  MOVWF  44
02CA:  MOVF   42,W
02CB:  MOVWF  45
02CC:  CALL   278
02CD:  MOVF   43,W
02CE:  BSF    03.6
02CF:  MOVWF  0D
02D0:  BCF    03.6
02D1:  MOVF   44,W
02D2:  BSF    03.6
02D3:  MOVWF  0F
02D4:  INCF   0D,F
02D5:  BTFSC  03.2
02D6:  INCF   0F,F
02D7:  BCF    03.0
02D8:  BCF    03.6
02D9:  DECFSZ 41,F
02DA:  GOTO   285
02DB:  RETURN
02DC:  MOVF   44,W
02DD:  CLRF   78
02DE:  SUBWF  43,W
02DF:  BTFSC  03.0
02E0:  GOTO   2E4
02E1:  MOVF   43,W
02E2:  MOVWF  77
02E3:  GOTO   2F0
02E4:  CLRF   77
02E5:  MOVLW  08
02E6:  MOVWF  45
02E7:  RLF    43,F
02E8:  RLF    77,F
02E9:  MOVF   44,W
02EA:  SUBWF  77,W
02EB:  BTFSC  03.0
02EC:  MOVWF  77
02ED:  RLF    78,F
02EE:  DECFSZ 45,F
02EF:  GOTO   2E7
02F0:  RETURN
02F1:  MOVF   78,W
02F2:  MOVF   41,W
02F3:  MOVWF  43
02F4:  MOVLW  64
02F5:  MOVWF  44
02F6:  CALL   2DC
02F7:  MOVF   77,W
02F8:  MOVWF  41
02F9:  MOVF   78,W
02FA:  MOVLW  30
02FB:  BTFSS  03.2
02FC:  GOTO   304
02FD:  BTFSS  42.1
02FE:  GOTO   30B
02FF:  BTFSC  42.3
0300:  GOTO   30B
0301:  BTFSC  42.4
0302:  MOVLW  20
0303:  GOTO   307
0304:  BCF    42.3
0305:  BCF    42.4
0306:  BSF    42.0
0307:  ADDWF  78,F
0308:  MOVF   78,W
0309:  MOVWF  45
030A:  CALL   278
030B:  MOVF   41,W
030C:  MOVWF  43
030D:  MOVLW  0A
030E:  MOVWF  44
030F:  CALL   2DC
0310:  MOVF   77,W
0311:  MOVWF  41
0312:  MOVF   78,W
0313:  MOVLW  30
0314:  BTFSS  03.2
0315:  GOTO   31C
0316:  BTFSC  42.3
0317:  GOTO   320
0318:  BTFSS  42.0
0319:  GOTO   320
031A:  BTFSC  42.4
031B:  MOVLW  20
031C:  ADDWF  78,F
031D:  MOVF   78,W
031E:  MOVWF  45
031F:  CALL   278
0320:  MOVLW  30
0321:  ADDWF  41,F
0322:  MOVF   41,W
0323:  MOVWF  45
0324:  CALL   278
0325:  RETURN
0326:  MOVF   00,F
0327:  BTFSC  03.2
0328:  GOTO   33B
0329:  CLRF   42
032A:  MOVF   04,W
032B:  MOVWF  41
032C:  BCF    42.0
032D:  BTFSC  03.7
032E:  BSF    42.0
032F:  MOVF   00,W
0330:  MOVWF  44
0331:  CALL   1FB
0332:  MOVF   41,W
0333:  MOVWF  04
0334:  BCF    03.7
0335:  BTFSC  42.0
0336:  BSF    03.7
0337:  INCF   04,F
0338:  BTFSC  03.2
0339:  INCF   05,F
033A:  GOTO   326
033B:  RETURN
.................... 
.................... #list
.................... 
.................... #device *=16 adc=8
.................... #use delay (clock=20M) 
.................... #include "DHT11.c"
.................... #define _DHT11_H_
.................... //!#include <def_877a.h>
.................... #use delay(crystal=20M)
*
0022:  MOVLW  54
0023:  MOVWF  04
0024:  BCF    03.7
0025:  MOVF   00,W
0026:  BTFSC  03.2
0027:  GOTO   035
0028:  MOVLW  06
0029:  MOVWF  78
002A:  CLRF   77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 78,F
002E:  GOTO   02A
002F:  MOVLW  7B
0030:  MOVWF  77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  DECFSZ 00,F
0034:  GOTO   028
0035:  RETURN
.................... 
.................... 
.................... //!#bit rb0 =0x06.0
.................... #BIT DHT_DATA_OUT = 0x06.0
.................... #BIT DHT_DATA_IN = 0x06.0
.................... //!#bit TRISB0 =0x86.0 
.................... #BIT DHT_DDR_DATA = 0x86.0
.................... 
.................... #define DHT_ER 0
.................... #define DHT_OK 1
.................... 
.................... #define DDROUT 0
.................... #define DDRIN 1
.................... 
.................... unsigned int8 DHT_GetTemHumi (unsigned int8 &tem1, , &tem2, unsigned int8 &humil, &humi2);
.................... 
.................... unsigned int8 DHT_GetTemHumi (unsigned int8 &tem1,&tem2, unsigned int8 &humi1, &humi2)
.................... { 
....................    unsigned int8 buffer[5]={0,0,0,0,0};
*
037D:  CLRF   44
037E:  CLRF   45
037F:  CLRF   46
0380:  CLRF   47
0381:  CLRF   48
....................    unsigned int8 ii,i,checksum;
....................    DHT_DDR_DATA=DDROUT;    // set la cong ra
0382:  BSF    03.5
0383:  BCF    06.0
....................    DHT_DATA_OUT=1;
0384:  BCF    03.5
0385:  BSF    06.0
....................    delay_us(60);
0386:  MOVLW  63
0387:  MOVWF  77
0388:  DECFSZ 77,F
0389:  GOTO   388
038A:  GOTO   38B
....................    DHT_DATA_OUT=0;
038B:  BCF    06.0
....................    delay_ms(25); // it nhat 18ms
038C:  MOVLW  19
038D:  MOVWF  54
038E:  CALL   022
....................    DHT_DATA_OUT=1;
038F:  BSF    06.0
....................    DHT_DDR_DATA=DDRIN;//set la cong vao
0390:  BSF    03.5
0391:  BSF    06.0
....................    
....................    delay_us(60);
0392:  MOVLW  63
0393:  MOVWF  77
0394:  DECFSZ 77,F
0395:  GOTO   394
0396:  GOTO   397
....................    if(DHT_DATA_IN) return DHT_ER;
0397:  BCF    03.5
0398:  BTFSS  06.0
0399:  GOTO   39E
039A:  MOVLW  00
039B:  MOVWF  78
039C:  GOTO   3EE
039D:  GOTO   3A0
....................    else while(!(DHT_DATA_IN)); //Doi DaTa len 1
039E:  BTFSS  06.0
039F:  GOTO   39E
....................    delay_us(60);//cho 60us
03A0:  MOVLW  63
03A1:  MOVWF  77
03A2:  DECFSZ 77,F
03A3:  GOTO   3A2
03A4:  GOTO   3A5
....................    if(!DHT_DATA_IN) return DHT_ER;
03A5:  BTFSC  06.0
03A6:  GOTO   3AB
03A7:  MOVLW  00
03A8:  MOVWF  78
03A9:  GOTO   3EE
03AA:  GOTO   3AD
....................    else while((DHT_DATA_IN)); //Doi Data ve 0
03AB:  BTFSC  06.0
03AC:  GOTO   3AB
....................     //Bat dau doc du lieu
....................     for(i=0;i<5;i++) 
03AD:  CLRF   4A
03AE:  MOVF   4A,W
03AF:  SUBLW  04
03B0:  BTFSS  03.0
03B1:  GOTO   3D8
....................     {
....................       for(ii=0;ii<8;ii++) 
03B2:  CLRF   49
03B3:  MOVF   49,W
03B4:  SUBLW  07
03B5:  BTFSS  03.0
03B6:  GOTO   3D6
....................       {
....................          while((!DHT_DATA_IN));              // Doi Data len 1
03B7:  BTFSS  06.0
03B8:  GOTO   3B7
....................          delay_us(50);
03B9:  MOVLW  53
03BA:  MOVWF  77
03BB:  DECFSZ 77,F
03BC:  GOTO   3BB
....................          if(DHT_DATA_IN)
03BD:  BTFSS  06.0
03BE:  GOTO   3D4
....................          {
....................             buffer[i]|=(1<<(7-ii));
03BF:  MOVLW  44
03C0:  ADDWF  4A,W
03C1:  MOVWF  04
03C2:  BCF    03.7
03C3:  MOVF   49,W
03C4:  SUBLW  07
03C5:  MOVWF  78
03C6:  MOVLW  01
03C7:  MOVWF  77
03C8:  MOVF   78,F
03C9:  BTFSC  03.2
03CA:  GOTO   3CF
03CB:  BCF    03.0
03CC:  RLF    77,F
03CD:  DECFSZ 78,F
03CE:  GOTO   3CB
03CF:  MOVF   77,W
03D0:  IORWF  00,W
03D1:  MOVWF  00
....................             while((DHT_DATA_IN));
03D2:  BTFSC  06.0
03D3:  GOTO   3D2
....................          }
03D4:  INCF   49,F
03D5:  GOTO   3B3
....................       }
03D6:  INCF   4A,F
03D7:  GOTO   3AE
....................     }
....................    checksum=buffer[0]+buffer[1]+buffer[2]+buffer[3]; 
03D8:  MOVF   45,W
03D9:  ADDWF  44,W
03DA:  ADDWF  46,W
03DB:  ADDWF  47,W
03DC:  MOVWF  4B
....................    if((checksum) !=buffer[4])return DHT_ER; 
03DD:  MOVF   48,W
03DE:  SUBWF  4B,W
03DF:  BTFSC  03.2
03E0:  GOTO   3E4
03E1:  MOVLW  00
03E2:  MOVWF  78
03E3:  GOTO   3EE
....................    tem1 = buffer[2];//gia tri phan nguyen 
03E4:  MOVF   46,W
03E5:  MOVWF  29
....................    tem2 = buffer[3];//gia tri phan thap phan
03E6:  MOVF   47,W
03E7:  MOVWF  2A
....................    humi1 = buffer[0];//gia tri phan nguyen 
03E8:  MOVF   44,W
03E9:  MOVWF  2B
....................    humi2 = buffer[1];//gia tri phan thap phan
03EA:  MOVF   45,W
03EB:  MOVWF  2C
....................    return DHT_OK;
03EC:  MOVLW  01
03ED:  MOVWF  78
.................... }
.................... 
.................... //!
.................... //!
.................... //!#include <def_877a.h>
.................... //!#bit ra0 =0x05.0
.................... //!#bit TRISA0 =0x85.0
.................... //!#device *=16 adc=8
.................... //!#define  Data_Pin       Pin_D4                      // ket noi voi chan RD0
.................... //!#define  Data_Pin_TRIS  SET_TRIS_D                // dieu khien chan data la output hay input 
.................... //!
.................... //!int8 Data_DHT11[5];
.................... //!
.................... //!int1 DHT11_Start(){    // start
.................... //!   Data_Pin_TRIS(0);   // MCU output
.................... //!   Output_low(Data_Pin);        // MCU keo chan data xuong muc thap >18 ms
.................... //!   delay_ms(25);
.................... //!   Output_high(Data_Pin);        // MCU keo chan data len muc cao 
.................... //!   Data_Pin_TRIS(0xff);   // MCU input doi tin hieu tra ve cua DHT11 khoang 20 - 40 us
.................... //!   delay_us(40);
.................... //!   if(input(Data_Pin) == 0){    //DHT11 keo chan data xuong thap 80 us sau do keo len cao 80 us --> xac nhan ket noi
.................... //!      delay_us(80);
.................... //!      if(input(Data_Pin) == 1){
.................... //!         delay_us(80);
.................... //!         return 1;         // xac nhan ket noi thanh cong
.................... //!      }
.................... //!   }
.................... //!}
.................... //! 
.................... //!
.................... //!int1 ReadData_DHT11(){       // doc data cua DHT11 tra ve
.................... //!    for(int i = 0; i < 5; i++){        // data: 5 byte
.................... //!      for(int j = 0; j < 8; j++){      // 1 byte 8 bit   tong 40 bit
.................... //!         // data
.................... //!         while(input(Data_Pin) == 0){};      // chay het 50us muc thap
.................... //!         delay_us(30);              //  hon 26-28us van la muc cao --> DHT11 chuyen di muc 1
.................... //!         if(input(Data_Pin) == 1){  
.................... //!               Data_DHT11[i] = Data_DHT11[i]<<1 | 1;
.................... //!               while(input(Data_Pin) == 1){} // chay het 70us muc cao
.................... //!         }
.................... //!         else{                   // tra ve bit 0
.................... //!            Data_DHT11[i] = Data_DHT11[i]<<1 | 0;
.................... //!         }
.................... //!      }   
.................... //!    }
.................... //!    // ------- kiem tra byte 5 = sum(byte 1 + 2 + 3 + 4) --> chuyen data thanh cong. nguoc lai 
.................... //!    if(Data_DHT11[4] == (Data_DHT11[0] + Data_DHT11[1] + Data_DHT11[2] + Data_DHT11[3])){
.................... //!      return 1;
.................... //!    }
.................... //!}
.................... //!
.................... //!
.................... //!
.................... //!
.................... //!void HienThi_Data_DHT11(){
.................... //!    //------------------in ket qua-----------------------------------------------
.................... //!    //in nhiet do
.................... //! 
.................... //!    
.................... //!    lcd_init(0x4E,16,2);
.................... //!    printf(lcd_putc, "Nhiet do = "); 
.................... //!    for(int i = 13; i > 11; i--){
.................... //!       lcd_gotoxy(i,1);       //hien thi hang don vi truoc >hang chuc
.................... //!       printf(lcd_putc, "%d", Data_DHT11[2] % 10 + 48); 
.................... //!       Data_DHT11[2]=Data_DHT11[2] / 10;
.................... //!    }
.................... //!    //in do am
.................... //!    lcd_gotoxy(1,2);
.................... //!    printf(lcd_putc, "Do am = ");  
.................... //!    for(int i = 13; i > 11; i--){ 
.................... //!       lcd_gotoxy(i,2);   
.................... //!       printf(lcd_putc, "%d", Data_DHT11[0] % 10 + 48); //hien thi hang don vi truoc >hang chuc  //doi ra so thap phan +48 
.................... //!       Data_DHT11[0]=Data_DHT11[0] / 10;
.................... //!    }
.................... //!      //hien thi don vi nhiet do va do am 
.................... //!    LCD_Gotoxy(14,1);   
.................... //!    LCD_putc(223);
.................... //!    LCD_putc('C');
.................... //!    LCD_Gotoxy(14,2);   
.................... //!    LCD_putc('%');
.................... //!}
.................... 
.................... 
.................... 
.................... #use i2c(Master,Fast=100000, sda=PIN_C4, scl=PIN_C3,force_sw)
*
0036:  MOVLW  08
0037:  MOVWF  78
0038:  MOVLW  04
0039:  MOVWF  77
003A:  DECFSZ 77,F
003B:  GOTO   03A
003C:  BCF    07.3
003D:  BCF    20.3
003E:  MOVF   20,W
003F:  BSF    03.5
0040:  MOVWF  07
0041:  MOVLW  03
0042:  MOVWF  77
0043:  DECFSZ 77,F
0044:  GOTO   043
0045:  BCF    03.5
0046:  RLF    52,F
0047:  BCF    07.4
0048:  BTFSS  03.0
0049:  GOTO   050
004A:  BSF    20.4
004B:  MOVF   20,W
004C:  BSF    03.5
004D:  MOVWF  07
004E:  GOTO   054
004F:  BCF    03.5
0050:  BCF    20.4
0051:  MOVF   20,W
0052:  BSF    03.5
0053:  MOVWF  07
0054:  NOP
0055:  BCF    03.5
0056:  BSF    20.3
0057:  MOVF   20,W
0058:  BSF    03.5
0059:  MOVWF  07
005A:  BCF    03.5
005B:  BTFSS  07.3
005C:  GOTO   05B
005D:  DECFSZ 78,F
005E:  GOTO   038
005F:  MOVLW  04
0060:  MOVWF  77
0061:  DECFSZ 77,F
0062:  GOTO   061
0063:  BCF    07.3
0064:  BCF    20.3
0065:  MOVF   20,W
0066:  BSF    03.5
0067:  MOVWF  07
0068:  NOP
0069:  BCF    03.5
006A:  BSF    20.4
006B:  MOVF   20,W
006C:  BSF    03.5
006D:  MOVWF  07
006E:  MOVLW  03
006F:  MOVWF  77
0070:  DECFSZ 77,F
0071:  GOTO   070
0072:  MOVLW  03
0073:  MOVWF  77
0074:  DECFSZ 77,F
0075:  GOTO   074
0076:  BCF    03.5
0077:  BSF    20.3
0078:  MOVF   20,W
0079:  BSF    03.5
007A:  MOVWF  07
007B:  BCF    03.5
007C:  BTFSS  07.3
007D:  GOTO   07C
007E:  CLRF   78
007F:  MOVLW  03
0080:  MOVWF  77
0081:  DECFSZ 77,F
0082:  GOTO   081
0083:  BTFSC  07.4
0084:  BSF    78.0
0085:  BCF    07.3
0086:  BCF    20.3
0087:  MOVF   20,W
0088:  BSF    03.5
0089:  MOVWF  07
008A:  BCF    03.5
008B:  BCF    07.4
008C:  BCF    20.4
008D:  MOVF   20,W
008E:  BSF    03.5
008F:  MOVWF  07
0090:  BCF    03.5
0091:  RETURN
.................... #include "i2c_Flex_LCD.c"
.................... //----------------------------------------------------------------------------- 
.................... // Title:         i2c_Flex_LCD 
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns 
.................... //                using PCF8574T interface board with I2C protocol. 
.................... // Date:          Nov-2013 
.................... // Ver.Rev.:      1.1 
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // lcd_init() Must be called before any other function. 
.................... // 
.................... // lcd_putc(c) Will display c on the next position of the LCD. 
.................... //  
.................... //     \f Clear LCD display 
.................... //     \n Set write position on next lcd line 
.................... //     \b LCD backspace 
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1) 
.................... // 
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED 
.................... // 
.................... //----------------------------------------------------------------------------- 
.................... // LCD pins D0-D3 are not used. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from 
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C. 
.................... //              The tests of these routines have been programmed using the IC 
.................... //              Phillips PCF8574T. I've used 4 bits mode programming. 
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T. 
.................... //              RW Pin is not being used. 
.................... // 
.................... // As defined in the following structure the pin connection is as follows: 
.................... // 
.................... //  PCF8574P     LCD 
.................... //  ========     ====== 
.................... //     P0        RS 
.................... //     P1        RW    (Not used!) 
.................... //     P2        Enable  
.................... //     P3        Led Backlight 
.................... //     P4        D4 
.................... //     P5        D5 
.................... //     P6        D6 
.................... //     P7        D7 
.................... // 
.................... //  The SCL and SDA pins should be pull-up resistor as shown below: 
.................... // 
.................... //             +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SDA pin  
.................... //(SDA)                      
.................... //              +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SCL pin  
.................... //(SCL) 
.................... // 
.................... //To PIC                    To i2c slave 
.................... //Vss pin ----------------- Vss or ground pin  
.................... //                | 
.................... //              ----- 
.................... //               ---  Ground 
.................... //                -  
.................... //  
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS" 
.................... //----------------------------------------------------------------------------- 
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module 
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4 
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20   
.................... 
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS 
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW 
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN 
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED 
.................... 
.................... #define addr_row_one          0x00        //LCD RAM address for row 1 
.................... #define addr_row_two          0x40        //LCD RAM address for row 2 
.................... #define addr_row_three        0x14        //LCD RAM address for row 3 
.................... #define addr_row_four         0x54        //LCD RAM address for row 4 
.................... 
.................... #define ON                    1 
.................... #define OFF                   0 
.................... #define NOT                   ~ 
.................... #define data_shifted          data<<4 
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT; 
.................... 
.................... void lcd_backlight_led(byte bl) 
.................... {  
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF; 
*
01BC:  MOVF   41,F
01BD:  BTFSC  03.2
01BE:  GOTO   1C2
01BF:  MOVLW  08
01C0:  MOVWF  25
01C1:  GOTO   1C3
01C2:  CLRF   25
01C3:  RETURN
.................... } 
.................... 
.................... void i2c_send_nibble(byte data, byte type) 
.................... {    
....................    switch (type) 
*
0092:  MOVF   50,W
0093:  XORLW  00
0094:  BTFSC  03.2
0095:  GOTO   09A
0096:  XORLW  01
0097:  BTFSC  03.2
0098:  GOTO   0BD
0099:  GOTO   0E1
....................    {      
....................       case 0 :      
....................       i2c_write(data_shifted | BACKLIGHT_LED); 
009A:  SWAPF  4F,W
009B:  MOVWF  77
009C:  MOVLW  F0
009D:  ANDWF  77,F
009E:  MOVF   77,W
009F:  IORWF  25,W
00A0:  MOVWF  51
00A1:  MOVWF  52
00A2:  CALL   036
....................       delay_cycles(1); 
00A3:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED ); 
00A4:  SWAPF  4F,W
00A5:  MOVWF  77
00A6:  MOVLW  F0
00A7:  ANDWF  77,F
00A8:  MOVF   77,W
00A9:  IORLW  04
00AA:  IORWF  25,W
00AB:  MOVWF  51
00AC:  MOVWF  52
00AD:  CALL   036
....................       delay_us(2); 
00AE:  MOVLW  03
00AF:  MOVWF  77
00B0:  DECFSZ 77,F
00B1:  GOTO   0B0
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED); 
00B2:  SWAPF  4F,W
00B3:  MOVWF  77
00B4:  MOVLW  F0
00B5:  ANDWF  77,F
00B6:  MOVF   77,W
00B7:  ANDLW  FB
00B8:  IORWF  25,W
00B9:  MOVWF  51
00BA:  MOVWF  52
00BB:  CALL   036
....................       break; 
00BC:  GOTO   0E1
....................       
....................       case 1 : 
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED); 
00BD:  SWAPF  4F,W
00BE:  MOVWF  77
00BF:  MOVLW  F0
00C0:  ANDWF  77,F
00C1:  MOVF   77,W
00C2:  IORLW  01
00C3:  IORWF  25,W
00C4:  MOVWF  51
00C5:  MOVWF  52
00C6:  CALL   036
....................       delay_cycles(1); 
00C7:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED ); 
00C8:  SWAPF  4F,W
00C9:  MOVWF  77
00CA:  MOVLW  F0
00CB:  ANDWF  77,F
00CC:  MOVF   77,W
00CD:  IORLW  01
00CE:  IORLW  04
00CF:  IORWF  25,W
00D0:  MOVWF  51
00D1:  MOVWF  52
00D2:  CALL   036
....................       delay_us(2); 
00D3:  MOVLW  03
00D4:  MOVWF  77
00D5:  DECFSZ 77,F
00D6:  GOTO   0D5
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED); 
00D7:  SWAPF  4F,W
00D8:  MOVWF  77
00D9:  MOVLW  F0
00DA:  ANDWF  77,F
00DB:  MOVF   77,W
00DC:  IORLW  01
00DD:  IORWF  25,W
00DE:  MOVWF  51
00DF:  MOVWF  52
00E0:  CALL   036
....................       break; 
....................    } 
00E1:  RETURN
.................... } 
....................     
.................... void lcd_send_byte(byte data, byte type) 
....................    { 
....................         i2c_start(); 
00E2:  BSF    20.4
00E3:  MOVF   20,W
00E4:  BSF    03.5
00E5:  MOVWF  07
00E6:  MOVLW  04
00E7:  MOVWF  77
00E8:  DECFSZ 77,F
00E9:  GOTO   0E8
00EA:  BCF    03.5
00EB:  BSF    20.3
00EC:  MOVF   20,W
00ED:  BSF    03.5
00EE:  MOVWF  07
00EF:  MOVLW  03
00F0:  MOVWF  77
00F1:  DECFSZ 77,F
00F2:  GOTO   0F1
00F3:  BCF    03.5
00F4:  BCF    07.4
00F5:  BCF    20.4
00F6:  MOVF   20,W
00F7:  BSF    03.5
00F8:  MOVWF  07
00F9:  MOVLW  04
00FA:  MOVWF  77
00FB:  DECFSZ 77,F
00FC:  GOTO   0FB
00FD:  BCF    03.5
00FE:  BCF    07.3
00FF:  BCF    20.3
0100:  MOVF   20,W
0101:  BSF    03.5
0102:  MOVWF  07
....................         i2c_write(LCD_ADDR); 
0103:  BCF    03.5
0104:  MOVF   21,W
0105:  MOVWF  52
0106:  CALL   036
....................         i2c_send_nibble(data >> 4 , type); 
0107:  SWAPF  4C,W
0108:  MOVWF  4E
0109:  MOVLW  0F
010A:  ANDWF  4E,F
010B:  MOVF   4E,W
010C:  MOVWF  4F
010D:  MOVF   4D,W
010E:  MOVWF  50
010F:  CALL   092
....................         i2c_send_nibble(data & 0xf , type); 
0110:  MOVF   4C,W
0111:  ANDLW  0F
0112:  MOVWF  4E
0113:  MOVWF  4F
0114:  MOVF   4D,W
0115:  MOVWF  50
0116:  CALL   092
....................         i2c_stop();        
0117:  BCF    20.4
0118:  MOVF   20,W
0119:  BSF    03.5
011A:  MOVWF  07
011B:  NOP
011C:  BCF    03.5
011D:  BSF    20.3
011E:  MOVF   20,W
011F:  BSF    03.5
0120:  MOVWF  07
0121:  BCF    03.5
0122:  BTFSS  07.3
0123:  GOTO   122
0124:  MOVLW  04
0125:  MOVWF  77
0126:  DECFSZ 77,F
0127:  GOTO   126
0128:  GOTO   129
0129:  NOP
012A:  BSF    20.4
012B:  MOVF   20,W
012C:  BSF    03.5
012D:  MOVWF  07
012E:  MOVLW  04
012F:  MOVWF  77
0130:  DECFSZ 77,F
0131:  GOTO   130
0132:  BCF    03.5
0133:  RETURN
....................    } 
.................... 
.................... void lcd_clear() 
.................... {  
....................         lcd_send_byte(0x01,0); 
0134:  MOVLW  01
0135:  MOVWF  4C
0136:  CLRF   4D
0137:  CALL   0E2
....................         delay_ms(2); 
0138:  MOVLW  02
0139:  MOVWF  54
013A:  CALL   022
....................         new_row_request=1; 
013B:  MOVLW  01
013C:  MOVWF  24
013D:  RETURN
.................... } 
.................... 
.................... void lcd_init(byte ADDR, byte col, byte row) 
.................... { 
....................    byte i;
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines 
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up.
....................    
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module 
013E:  MOVF   41,W
013F:  MOVWF  21
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4 
0140:  MOVF   43,W
0141:  MOVWF  22
....................    lcd_total_columns= col ;
0142:  MOVF   42,W
0143:  MOVWF  23
....................    disable_interrupts(GLOBAL); 
0144:  BCF    0B.6
0145:  BCF    0B.7
0146:  BTFSC  0B.7
0147:  GOTO   145
....................    delay_ms(50); //LCD power up delay 
0148:  MOVLW  32
0149:  MOVWF  54
014A:  CALL   022
....................     
....................    i2c_start(); 
014B:  BSF    20.4
014C:  MOVF   20,W
014D:  BSF    03.5
014E:  MOVWF  07
014F:  MOVLW  04
0150:  MOVWF  77
0151:  DECFSZ 77,F
0152:  GOTO   151
0153:  BCF    03.5
0154:  BSF    20.3
0155:  MOVF   20,W
0156:  BSF    03.5
0157:  MOVWF  07
0158:  MOVLW  03
0159:  MOVWF  77
015A:  DECFSZ 77,F
015B:  GOTO   15A
015C:  BCF    03.5
015D:  BCF    07.4
015E:  BCF    20.4
015F:  MOVF   20,W
0160:  BSF    03.5
0161:  MOVWF  07
0162:  MOVLW  04
0163:  MOVWF  77
0164:  DECFSZ 77,F
0165:  GOTO   164
0166:  BCF    03.5
0167:  BCF    07.3
0168:  BCF    20.3
0169:  MOVF   20,W
016A:  BSF    03.5
016B:  MOVWF  07
....................    i2c_write(LCD_ADDR); 
016C:  BCF    03.5
016D:  MOVF   21,W
016E:  MOVWF  52
016F:  CALL   036
....................       i2c_send_nibble(0x00,0); 
0170:  CLRF   4F
0171:  CLRF   50
0172:  CALL   092
....................       delay_ms(15); 
0173:  MOVLW  0F
0174:  MOVWF  54
0175:  CALL   022
....................     
....................    for (i=1;i<=3;++i)    
0176:  MOVLW  01
0177:  MOVWF  44
0178:  MOVF   44,W
0179:  SUBLW  03
017A:  BTFSS  03.0
017B:  GOTO   185
....................    { 
....................       i2c_send_nibble(0x03,0); 
017C:  MOVLW  03
017D:  MOVWF  4F
017E:  CLRF   50
017F:  CALL   092
....................       delay_ms(5); 
0180:  MOVLW  05
0181:  MOVWF  54
0182:  CALL   022
0183:  INCF   44,F
0184:  GOTO   178
....................    }    
....................       i2c_send_nibble(0x02,0); 
0185:  MOVLW  02
0186:  MOVWF  4F
0187:  CLRF   50
0188:  CALL   092
....................       delay_ms(5); 
0189:  MOVLW  05
018A:  MOVWF  54
018B:  CALL   022
....................    i2c_stop(); 
018C:  BCF    20.4
018D:  MOVF   20,W
018E:  BSF    03.5
018F:  MOVWF  07
0190:  NOP
0191:  BCF    03.5
0192:  BSF    20.3
0193:  MOVF   20,W
0194:  BSF    03.5
0195:  MOVWF  07
0196:  BCF    03.5
0197:  BTFSS  07.3
0198:  GOTO   197
0199:  MOVLW  04
019A:  MOVWF  77
019B:  DECFSZ 77,F
019C:  GOTO   19B
019D:  GOTO   19E
019E:  NOP
019F:  BSF    20.4
01A0:  MOVF   20,W
01A1:  BSF    03.5
01A2:  MOVWF  07
01A3:  MOVLW  04
01A4:  MOVWF  77
01A5:  DECFSZ 77,F
01A6:  GOTO   1A5
....................     
....................    for (i=0;i<=3;++i) { 
01A7:  BCF    03.5
01A8:  CLRF   44
01A9:  MOVF   44,W
01AA:  SUBLW  03
01AB:  BTFSS  03.0
01AC:  GOTO   1B8
....................    lcd_send_byte(LCD_INIT_STRING[i],0); 
01AD:  MOVF   44,W
01AE:  CALL   004
01AF:  MOVWF  45
01B0:  MOVWF  4C
01B1:  CLRF   4D
01B2:  CALL   0E2
....................    delay_ms(5); 
01B3:  MOVLW  05
01B4:  MOVWF  54
01B5:  CALL   022
01B6:  INCF   44,F
01B7:  GOTO   1A9
....................    } 
....................    lcd_clear();  //Clear Display 
01B8:  CALL   134
....................    enable_interrupts(GLOBAL); 
01B9:  MOVLW  C0
01BA:  IORWF  0B,F
01BB:  RETURN
.................... } 
.................... 
.................... void lcd_gotoxy( byte x, byte y) 
.................... { 
.................... byte row,column,row_addr,lcd_address; 
.................... static char data; 
*
034F:  BCF    03.5
0350:  CLRF   26
.................... 
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y; 
*
01C4:  MOVF   46,W
01C5:  SUBWF  22,W
01C6:  BTFSC  03.0
01C7:  GOTO   1CB
01C8:  MOVF   22,W
01C9:  MOVWF  47
01CA:  GOTO   1CD
01CB:  MOVF   46,W
01CC:  MOVWF  47
....................   
....................    switch(row) 
01CD:  MOVF   47,W
01CE:  XORLW  01
01CF:  BTFSC  03.2
01D0:  GOTO   1DB
01D1:  XORLW  03
01D2:  BTFSC  03.2
01D3:  GOTO   1DD
01D4:  XORLW  01
01D5:  BTFSC  03.2
01D6:  GOTO   1E0
01D7:  XORLW  07
01D8:  BTFSC  03.2
01D9:  GOTO   1E3
01DA:  GOTO   1E6
....................    { 
....................       case 1:  row_addr=addr_row_one;     break; 
01DB:  CLRF   49
01DC:  GOTO   1E7
....................       case 2:  row_addr=addr_row_two;     break; 
01DD:  MOVLW  40
01DE:  MOVWF  49
01DF:  GOTO   1E7
....................       case 3:  row_addr=addr_row_three;   break; 
01E0:  MOVLW  14
01E1:  MOVWF  49
01E2:  GOTO   1E7
....................       case 4:  row_addr=addr_row_four;    break; 
01E3:  MOVLW  54
01E4:  MOVWF  49
01E5:  GOTO   1E7
....................       default: row_addr=addr_row_one;     break;  
01E6:  CLRF   49
....................    }  
....................     
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;  
01E7:  MOVF   45,W
01E8:  SUBWF  23,W
01E9:  BTFSC  03.0
01EA:  GOTO   1EE
01EB:  MOVF   23,W
01EC:  MOVWF  48
01ED:  GOTO   1F0
01EE:  MOVF   45,W
01EF:  MOVWF  48
....................    lcd_address=(row_addr+(column-1)); 
01F0:  MOVLW  01
01F1:  SUBWF  48,W
01F2:  ADDWF  49,W
01F3:  MOVWF  4A
....................    lcd_send_byte(0x80|lcd_address,0); 
01F4:  MOVF   4A,W
01F5:  IORLW  80
01F6:  MOVWF  4B
01F7:  MOVWF  4C
01F8:  CLRF   4D
01F9:  CALL   0E2
01FA:  RETURN
.................... } 
.................... 
.................... //Display the character on LCD screen. 
.................... void LCD_PUTC(char in_data) 
.................... {    
....................   switch(in_data) 
01FB:  MOVF   44,W
01FC:  XORLW  0C
01FD:  BTFSC  03.2
01FE:  GOTO   206
01FF:  XORLW  06
0200:  BTFSC  03.2
0201:  GOTO   208
0202:  XORLW  02
0203:  BTFSC  03.2
0204:  GOTO   215
0205:  GOTO   21A
....................    {  
....................      case '\f': lcd_clear();                       break;                
0206:  CALL   134
0207:  GOTO   21F
....................       
....................      case '\n': 
....................      new_row_request++; 
0208:  INCF   24,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1; 
0209:  MOVF   24,W
020A:  SUBWF  22,W
020B:  BTFSC  03.0
020C:  GOTO   20F
020D:  MOVLW  01
020E:  MOVWF  24
....................      lcd_gotoxy(1, new_row_request); 
020F:  MOVLW  01
0210:  MOVWF  45
0211:  MOVF   24,W
0212:  MOVWF  46
0213:  CALL   1C4
....................      break; 
0214:  GOTO   21F
....................                   
....................      case '\b': lcd_send_byte(0x10,0);             break; 
0215:  MOVLW  10
0216:  MOVWF  4C
0217:  CLRF   4D
0218:  CALL   0E2
0219:  GOTO   21F
....................         
....................      default: lcd_send_byte(in_data,1);            break;      
021A:  MOVF   44,W
021B:  MOVWF  4C
021C:  MOVLW  01
021D:  MOVWF  4D
021E:  CALL   0E2
....................       
....................    } 
021F:  RETURN
.................... } 
.................... 
.................... 
.................... void main() { 
*
033C:  MOVF   03,W
033D:  ANDLW  1F
033E:  MOVWF  03
033F:  MOVLW  FF
0340:  MOVWF  20
0341:  MOVLW  01
0342:  MOVWF  24
0343:  MOVLW  08
0344:  MOVWF  25
0345:  CLRF   28
0346:  CLRF   27
0347:  BSF    03.5
0348:  BSF    1F.0
0349:  BSF    1F.1
034A:  BSF    1F.2
034B:  BCF    1F.3
034C:  MOVLW  07
034D:  MOVWF  1C
034E:  BCF    03.7
....................    //khai bao bien cuc bo o day
....................    unsigned int8 dh_nhiet_do,dh_nhiet_do2,dh_do_am,dh_do_am2;
....................    unsigned int8 str[20];
....................    
....................    lcd_init(0x4E,16,2);
*
0351:  MOVLW  4E
0352:  MOVWF  41
0353:  MOVLW  10
0354:  MOVWF  42
0355:  MOVLW  02
0356:  MOVWF  43
0357:  CALL   13E
....................    lcd_backlight_led(ON);
0358:  MOVLW  01
0359:  MOVWF  41
035A:  CALL   1BC
....................    lcd_init(0x40,16,2);
035B:  MOVLW  40
035C:  MOVWF  41
035D:  MOVLW  10
035E:  MOVWF  42
035F:  MOVLW  02
0360:  MOVWF  43
0361:  CALL   13E
....................    lcd_backlight_led(ON);
0362:  MOVLW  01
0363:  MOVWF  41
0364:  CALL   1BC
.................... 
....................    lcd_putc('\f'); 
0365:  MOVLW  0C
0366:  MOVWF  44
0367:  CALL   1FB
....................    lcd_gotoxy(1,1); 
0368:  MOVLW  01
0369:  MOVWF  45
036A:  MOVWF  46
036B:  CALL   1C4
....................    printf(lcd_putc,"READING DHT11");
036C:  MOVLW  0C
036D:  BSF    03.6
036E:  MOVWF  0D
036F:  MOVLW  00
0370:  MOVWF  0F
0371:  BCF    03.6
0372:  GOTO   220
....................    delay_ms(500); 
0373:  MOVLW  02
0374:  MOVWF  41
0375:  MOVLW  FA
0376:  MOVWF  54
0377:  CALL   022
0378:  DECFSZ 41,F
0379:  GOTO   375
....................    lcd_putc('\f');
037A:  MOVLW  0C
037B:  MOVWF  44
037C:  CALL   1FB
....................    
....................    while(TRUE) {
....................    //TO00: User Code 
....................       if (DHT_GetTemHumi(dh_nhiet_do,dh_nhiet_do2,dh_do_am,dh_do_am2))
*
03EE:  MOVF   78,F
03EF:  BTFSC  03.2
03F0:  GOTO   43F
....................       { 
....................          sprintf(str,"DO Am: %u,%u",dh_do_am,dh_do_am2);
03F1:  CLRF   28
03F2:  MOVLW  2D
03F3:  MOVWF  27
03F4:  MOVLW  13
03F5:  BSF    03.6
03F6:  MOVWF  0D
03F7:  MOVLW  00
03F8:  MOVWF  0F
03F9:  BCF    03.0
03FA:  MOVLW  07
03FB:  BCF    03.6
03FC:  MOVWF  41
03FD:  CALL   285
03FE:  MOVF   2B,W
03FF:  MOVWF  41
0400:  MOVLW  1B
0401:  MOVWF  42
0402:  CALL   2F1
0403:  MOVLW  2C
0404:  MOVWF  45
0405:  CALL   278
0406:  MOVF   2C,W
0407:  MOVWF  41
0408:  MOVLW  1B
0409:  MOVWF  42
040A:  CALL   2F1
....................          lcd_gotoxy(1,1); 
040B:  MOVLW  01
040C:  MOVWF  45
040D:  MOVWF  46
040E:  CALL   1C4
....................          printf(lcd_putc,"%s",str); 
040F:  MOVLW  2D
0410:  MOVWF  04
0411:  BCF    03.7
0412:  CALL   326
....................          lcd_putc('%'); 
0413:  MOVLW  25
0414:  MOVWF  44
0415:  CALL   1FB
....................          sprintf(str,"NHIET D0: %u,%u",dh_nhiet_do,dh_nhiet_do2);
0416:  CLRF   28
0417:  MOVLW  2D
0418:  MOVWF  27
0419:  MOVLW  1A
041A:  BSF    03.6
041B:  MOVWF  0D
041C:  MOVLW  00
041D:  MOVWF  0F
041E:  BCF    03.0
041F:  MOVLW  0A
0420:  BCF    03.6
0421:  MOVWF  41
0422:  CALL   285
0423:  MOVF   29,W
0424:  MOVWF  41
0425:  MOVLW  1B
0426:  MOVWF  42
0427:  CALL   2F1
0428:  MOVLW  2C
0429:  MOVWF  45
042A:  CALL   278
042B:  MOVF   2A,W
042C:  MOVWF  41
042D:  MOVLW  1B
042E:  MOVWF  42
042F:  CALL   2F1
....................          lcd_gotoxy(1,2); 
0430:  MOVLW  01
0431:  MOVWF  45
0432:  MOVLW  02
0433:  MOVWF  46
0434:  CALL   1C4
....................          printf(lcd_putc,"%s",str); 
0435:  MOVLW  2D
0436:  MOVWF  04
0437:  BCF    03.7
0438:  CALL   326
....................          lcd_putc(223); 
0439:  MOVLW  DF
043A:  MOVWF  44
043B:  CALL   1FB
....................          lcd_putc('C'); 
043C:  MOVLW  43
043D:  MOVWF  44
043E:  CALL   1FB
....................       } 
043F:  GOTO   37D
....................    }
....................   
.................... } 
0440:  SLEEP

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
