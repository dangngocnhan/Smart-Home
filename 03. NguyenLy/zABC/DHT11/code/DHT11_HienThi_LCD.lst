CCS PCM C Compiler, Version 5.101, 43599               10-Nov-22 21:54

               Filename:   C:\Users\DangNgocNhan\Desktop\P3\ZABC\do nhiet do do am su dung DHT11\code\DHT11_HienThi_LCD.lst

               ROM used:   1012 words (12%)
                           Largest free fragment is 2048
               RAM used:   33 (9%) at main() level
                           52 (14%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2F9
0003:  NOP
.................... 
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  DATA D2,22
0005:  DATA 41,22
0006:  DATA 49,27
0007:  DATA 47,10
0008:  DATA 44,24
0009:  DATA D4,18
000A:  DATA 31,00
000B:  DATA C4,27
000C:  DATA A0,20
000D:  DATA 6D,1D
000E:  DATA A0,12
000F:  DATA 75,16
0010:  DATA A5,3A
0011:  DATA 00,00
0012:  DATA 4E,24
0013:  DATA C9,22
0014:  DATA 54,10
0015:  DATA 44,18
0016:  DATA 3A,10
0017:  DATA A5,3A
0018:  DATA AC,12
0019:  DATA 75,00
*
01C9:  MOVF   0B,W
01CA:  MOVWF  3B
01CB:  BCF    0B.7
01CC:  BSF    03.5
01CD:  BSF    03.6
01CE:  BSF    0C.7
01CF:  BSF    0C.0
01D0:  NOP
01D1:  NOP
01D2:  BCF    03.5
01D3:  BCF    03.6
01D4:  BTFSC  3B.7
01D5:  BSF    0B.7
01D6:  BSF    03.6
01D7:  MOVF   0C,W
01D8:  ANDLW  7F
01D9:  BTFSC  03.2
01DA:  GOTO   21D
01DB:  BCF    03.6
01DC:  MOVWF  3B
01DD:  BSF    03.6
01DE:  MOVF   0D,W
01DF:  BCF    03.6
01E0:  MOVWF  3C
01E1:  BSF    03.6
01E2:  MOVF   0F,W
01E3:  BCF    03.6
01E4:  MOVWF  3D
01E5:  MOVF   3B,W
01E6:  MOVWF  3E
01E7:  CALL   1A5
01E8:  MOVF   3C,W
01E9:  BSF    03.6
01EA:  MOVWF  0D
01EB:  BCF    03.6
01EC:  MOVF   3D,W
01ED:  BSF    03.6
01EE:  MOVWF  0F
01EF:  BCF    03.6
01F0:  MOVF   0B,W
01F1:  MOVWF  3E
01F2:  BCF    0B.7
01F3:  BSF    03.5
01F4:  BSF    03.6
01F5:  BSF    0C.7
01F6:  BSF    0C.0
01F7:  NOP
01F8:  NOP
01F9:  BCF    03.5
01FA:  BCF    03.6
01FB:  BTFSC  3E.7
01FC:  BSF    0B.7
01FD:  BSF    03.6
01FE:  RLF    0C,W
01FF:  RLF    0E,W
0200:  ANDLW  7F
0201:  BTFSC  03.2
0202:  GOTO   21D
0203:  BCF    03.6
0204:  MOVWF  3B
0205:  BSF    03.6
0206:  MOVF   0D,W
0207:  BCF    03.6
0208:  MOVWF  3C
0209:  BSF    03.6
020A:  MOVF   0F,W
020B:  BCF    03.6
020C:  MOVWF  3D
020D:  MOVF   3B,W
020E:  MOVWF  3E
020F:  CALL   1A5
0210:  MOVF   3C,W
0211:  BSF    03.6
0212:  MOVWF  0D
0213:  BCF    03.6
0214:  MOVF   3D,W
0215:  BSF    03.6
0216:  MOVWF  0F
0217:  INCF   0D,F
0218:  BTFSC  03.2
0219:  INCF   0F,F
021A:  BCF    03.6
021B:  GOTO   1C9
021C:  BSF    03.6
021D:  BCF    03.6
021E:  BCF    0A.3
021F:  BCF    0A.4
0220:  GOTO   318 (RETURN)
*
0235:  MOVF   21,W
0236:  MOVWF  04
0237:  BCF    03.7
0238:  BTFSC  22.0
0239:  BSF    03.7
023A:  MOVF   3F,W
023B:  MOVWF  00
023C:  INCF   04,F
023D:  CLRF   00
023E:  INCF   21,F
023F:  BTFSC  03.2
0240:  INCF   22,F
0241:  RETURN
0242:  MOVF   0B,W
0243:  MOVWF  3C
0244:  BCF    0B.7
0245:  BSF    03.5
0246:  BSF    03.6
0247:  BSF    0C.7
0248:  BSF    0C.0
0249:  NOP
024A:  NOP
024B:  BCF    03.5
024C:  BCF    03.6
024D:  BTFSC  3C.7
024E:  BSF    0B.7
024F:  BTFSC  03.0
0250:  GOTO   279
0251:  BSF    03.6
0252:  MOVF   0C,W
0253:  ANDLW  7F
0254:  BCF    03.6
0255:  MOVWF  3C
0256:  BSF    03.6
0257:  MOVF   0D,W
0258:  BCF    03.6
0259:  MOVWF  3D
025A:  BSF    03.6
025B:  MOVF   0F,W
025C:  BCF    03.6
025D:  MOVWF  3E
025E:  MOVF   3C,W
025F:  MOVWF  3F
0260:  CALL   235
0261:  MOVF   3D,W
0262:  BSF    03.6
0263:  MOVWF  0D
0264:  BCF    03.6
0265:  MOVF   3E,W
0266:  BSF    03.6
0267:  MOVWF  0F
0268:  BCF    03.6
0269:  MOVF   0B,W
026A:  MOVWF  3F
026B:  BCF    0B.7
026C:  BSF    03.5
026D:  BSF    03.6
026E:  BSF    0C.7
026F:  BSF    0C.0
0270:  NOP
0271:  NOP
0272:  BCF    03.5
0273:  BCF    03.6
0274:  BTFSC  3F.7
0275:  BSF    0B.7
0276:  DECFSZ 3B,F
0277:  GOTO   279
0278:  GOTO   298
0279:  BSF    03.6
027A:  RLF    0C,W
027B:  RLF    0E,W
027C:  ANDLW  7F
027D:  BCF    03.6
027E:  MOVWF  3C
027F:  BSF    03.6
0280:  MOVF   0D,W
0281:  BCF    03.6
0282:  MOVWF  3D
0283:  BSF    03.6
0284:  MOVF   0F,W
0285:  BCF    03.6
0286:  MOVWF  3E
0287:  MOVF   3C,W
0288:  MOVWF  3F
0289:  CALL   235
028A:  MOVF   3D,W
028B:  BSF    03.6
028C:  MOVWF  0D
028D:  BCF    03.6
028E:  MOVF   3E,W
028F:  BSF    03.6
0290:  MOVWF  0F
0291:  INCF   0D,F
0292:  BTFSC  03.2
0293:  INCF   0F,F
0294:  BCF    03.0
0295:  BCF    03.6
0296:  DECFSZ 3B,F
0297:  GOTO   242
0298:  RETURN
0299:  MOVF   3E,W
029A:  CLRF   78
029B:  SUBWF  3D,W
029C:  BTFSC  03.0
029D:  GOTO   2A1
029E:  MOVF   3D,W
029F:  MOVWF  77
02A0:  GOTO   2AD
02A1:  CLRF   77
02A2:  MOVLW  08
02A3:  MOVWF  3F
02A4:  RLF    3D,F
02A5:  RLF    77,F
02A6:  MOVF   3E,W
02A7:  SUBWF  77,W
02A8:  BTFSC  03.0
02A9:  MOVWF  77
02AA:  RLF    78,F
02AB:  DECFSZ 3F,F
02AC:  GOTO   2A4
02AD:  RETURN
02AE:  MOVF   78,W
02AF:  MOVF   3B,W
02B0:  MOVWF  3D
02B1:  MOVLW  64
02B2:  MOVWF  3E
02B3:  CALL   299
02B4:  MOVF   77,W
02B5:  MOVWF  3B
02B6:  MOVF   78,W
02B7:  MOVLW  30
02B8:  BTFSS  03.2
02B9:  GOTO   2C1
02BA:  BTFSS  3C.1
02BB:  GOTO   2C8
02BC:  BTFSC  3C.3
02BD:  GOTO   2C8
02BE:  BTFSC  3C.4
02BF:  MOVLW  20
02C0:  GOTO   2C4
02C1:  BCF    3C.3
02C2:  BCF    3C.4
02C3:  BSF    3C.0
02C4:  ADDWF  78,F
02C5:  MOVF   78,W
02C6:  MOVWF  3F
02C7:  CALL   235
02C8:  MOVF   3B,W
02C9:  MOVWF  3D
02CA:  MOVLW  0A
02CB:  MOVWF  3E
02CC:  CALL   299
02CD:  MOVF   77,W
02CE:  MOVWF  3B
02CF:  MOVF   78,W
02D0:  MOVLW  30
02D1:  BTFSS  03.2
02D2:  GOTO   2D9
02D3:  BTFSC  3C.3
02D4:  GOTO   2DD
02D5:  BTFSS  3C.0
02D6:  GOTO   2DD
02D7:  BTFSC  3C.4
02D8:  MOVLW  20
02D9:  ADDWF  78,F
02DA:  MOVF   78,W
02DB:  MOVWF  3F
02DC:  CALL   235
02DD:  MOVLW  30
02DE:  ADDWF  3B,F
02DF:  MOVF   3B,W
02E0:  MOVWF  3F
02E1:  CALL   235
02E2:  RETURN
02E3:  MOVF   00,F
02E4:  BTFSC  03.2
02E5:  GOTO   2F8
02E6:  CLRF   3C
02E7:  MOVF   04,W
02E8:  MOVWF  3B
02E9:  BCF    3C.0
02EA:  BTFSC  03.7
02EB:  BSF    3C.0
02EC:  MOVF   00,W
02ED:  MOVWF  3E
02EE:  CALL   1A5
02EF:  MOVF   3B,W
02F0:  MOVWF  04
02F1:  BCF    03.7
02F2:  BTFSC  3C.0
02F3:  BSF    03.7
02F4:  INCF   04,F
02F5:  BTFSC  03.2
02F6:  INCF   05,F
02F7:  GOTO   2E3
02F8:  RETURN
.................... 
.................... #list
.................... 
.................... 
.................... #device *=16 adc=8
.................... #use delay (clock=20M) 
*
001A:  MOVLW  40
001B:  MOVWF  04
001C:  BCF    03.7
001D:  MOVF   00,W
001E:  BTFSC  03.2
001F:  GOTO   02D
0020:  MOVLW  06
0021:  MOVWF  78
0022:  CLRF   77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  DECFSZ 78,F
0026:  GOTO   022
0027:  MOVLW  7B
0028:  MOVWF  77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 00,F
002C:  GOTO   020
002D:  RETURN
.................... 
.................... 
.................... //!#define LCD_RS_PIN      PIN_C2
.................... //!#define LCD_RW_PIN      PIN_C1
.................... //!#define LCD_ENABLE_PIN  PIN_C0
.................... //!#define LCD_DATA4       PIN_C4
.................... //!#define LCD_DATA5       PIN_C5
.................... //!#define LCD_DATA6       PIN_C6
.................... //!#define LCD_DATA7       PIN_C7
.................... 
.................... #define LCD_RS_PIN      PIN_C2
.................... #define LCD_RW_PIN      PIN_C1
.................... #define LCD_ENABLE_PIN  PIN_C0
.................... #define LCD_DATA4       PIN_C4
.................... #define LCD_DATA5       PIN_C5
.................... #define LCD_DATA6       PIN_C6
.................... #define LCD_DATA7       PIN_C7
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
00B5:  BSF    07.4
....................    output_float(LCD_DATA5);
00B6:  BSF    07.5
....................    output_float(LCD_DATA6);
00B7:  BSF    07.6
....................    output_float(LCD_DATA7);
00B8:  BSF    07.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00B9:  BCF    03.5
00BA:  BSF    07.1
00BB:  BCF    20.1
00BC:  MOVF   20,W
00BD:  BSF    03.5
00BE:  MOVWF  07
....................    delay_cycles(1);
00BF:  NOP
....................    lcd_output_enable(1);
00C0:  BCF    03.5
00C1:  BSF    07.0
00C2:  BCF    20.0
00C3:  MOVF   20,W
00C4:  BSF    03.5
00C5:  MOVWF  07
....................    delay_cycles(1);
00C6:  NOP
....................    high = lcd_read_nibble();
00C7:  BCF    03.5
00C8:  CALL   068
00C9:  MOVF   78,W
00CA:  MOVWF  46
....................       
....................    lcd_output_enable(0);
00CB:  BCF    07.0
00CC:  BCF    20.0
00CD:  MOVF   20,W
00CE:  BSF    03.5
00CF:  MOVWF  07
....................    delay_cycles(1);
00D0:  NOP
....................    lcd_output_enable(1);
00D1:  BCF    03.5
00D2:  BSF    07.0
00D3:  BCF    20.0
00D4:  MOVF   20,W
00D5:  BSF    03.5
00D6:  MOVWF  07
....................    delay_us(1);
00D7:  GOTO   0D8
00D8:  GOTO   0D9
00D9:  NOP
....................    low = lcd_read_nibble();
00DA:  BCF    03.5
00DB:  CALL   068
00DC:  MOVF   78,W
00DD:  MOVWF  45
....................       
....................    lcd_output_enable(0);
00DE:  BCF    07.0
00DF:  BCF    20.0
00E0:  MOVF   20,W
00E1:  BSF    03.5
00E2:  MOVWF  07
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00E3:  BCF    03.5
00E4:  BCF    20.4
00E5:  MOVF   20,W
00E6:  BSF    03.5
00E7:  MOVWF  07
....................    output_drive(LCD_DATA5);
00E8:  BCF    03.5
00E9:  BCF    20.5
00EA:  MOVF   20,W
00EB:  BSF    03.5
00EC:  MOVWF  07
....................    output_drive(LCD_DATA6);
00ED:  BCF    03.5
00EE:  BCF    20.6
00EF:  MOVF   20,W
00F0:  BSF    03.5
00F1:  MOVWF  07
....................    output_drive(LCD_DATA7);
00F2:  BCF    03.5
00F3:  BCF    20.7
00F4:  MOVF   20,W
00F5:  BSF    03.5
00F6:  MOVWF  07
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00F7:  BCF    03.5
00F8:  SWAPF  46,W
00F9:  MOVWF  77
00FA:  MOVLW  F0
00FB:  ANDWF  77,F
00FC:  MOVF   77,W
00FD:  IORWF  45,W
00FE:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0068:  CLRF   47
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0069:  BSF    20.4
006A:  MOVF   20,W
006B:  BSF    03.5
006C:  MOVWF  07
006D:  MOVLW  00
006E:  BCF    03.5
006F:  BTFSC  07.4
0070:  MOVLW  01
0071:  IORWF  47,F
....................    n |= input(LCD_DATA5) << 1;
0072:  BSF    20.5
0073:  MOVF   20,W
0074:  BSF    03.5
0075:  MOVWF  07
0076:  MOVLW  00
0077:  BCF    03.5
0078:  BTFSC  07.5
0079:  MOVLW  01
007A:  MOVWF  77
007B:  BCF    03.0
007C:  RLF    77,F
007D:  MOVF   77,W
007E:  IORWF  47,F
....................    n |= input(LCD_DATA6) << 2;
007F:  BSF    20.6
0080:  MOVF   20,W
0081:  BSF    03.5
0082:  MOVWF  07
0083:  MOVLW  00
0084:  BCF    03.5
0085:  BTFSC  07.6
0086:  MOVLW  01
0087:  MOVWF  77
0088:  RLF    77,F
0089:  RLF    77,F
008A:  MOVLW  FC
008B:  ANDWF  77,F
008C:  MOVF   77,W
008D:  IORWF  47,F
....................    n |= input(LCD_DATA7) << 3;
008E:  BSF    20.7
008F:  MOVF   20,W
0090:  BSF    03.5
0091:  MOVWF  07
0092:  MOVLW  00
0093:  BCF    03.5
0094:  BTFSC  07.7
0095:  MOVLW  01
0096:  MOVWF  77
0097:  RLF    77,F
0098:  RLF    77,F
0099:  RLF    77,F
009A:  MOVLW  F8
009B:  ANDWF  77,F
009C:  MOVF   77,W
009D:  IORWF  47,F
....................    
....................    return(n);
009E:  MOVF   47,W
009F:  MOVWF  78
....................   #else
00A0:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
002E:  BTFSC  46.0
002F:  GOTO   032
0030:  BCF    07.4
0031:  GOTO   033
0032:  BSF    07.4
0033:  BCF    20.4
0034:  MOVF   20,W
0035:  BSF    03.5
0036:  MOVWF  07
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0037:  BCF    03.5
0038:  BTFSC  46.1
0039:  GOTO   03C
003A:  BCF    07.5
003B:  GOTO   03D
003C:  BSF    07.5
003D:  BCF    20.5
003E:  MOVF   20,W
003F:  BSF    03.5
0040:  MOVWF  07
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0041:  BCF    03.5
0042:  BTFSC  46.2
0043:  GOTO   046
0044:  BCF    07.6
0045:  GOTO   047
0046:  BSF    07.6
0047:  BCF    20.6
0048:  MOVF   20,W
0049:  BSF    03.5
004A:  MOVWF  07
....................    output_bit(LCD_DATA7, bit_test(n, 3));
004B:  BCF    03.5
004C:  BTFSC  46.3
004D:  GOTO   050
004E:  BCF    07.7
004F:  GOTO   051
0050:  BSF    07.7
0051:  BCF    20.7
0052:  MOVF   20,W
0053:  BSF    03.5
0054:  MOVWF  07
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0055:  NOP
....................    lcd_output_enable(1);
0056:  BCF    03.5
0057:  BSF    07.0
0058:  BCF    20.0
0059:  MOVF   20,W
005A:  BSF    03.5
005B:  MOVWF  07
....................    delay_us(2);
005C:  MOVLW  03
005D:  MOVWF  77
005E:  DECFSZ 77,F
005F:  GOTO   05E
....................    lcd_output_enable(0);
0060:  BCF    03.5
0061:  BCF    07.0
0062:  BCF    20.0
0063:  MOVF   20,W
0064:  BSF    03.5
0065:  MOVWF  07
0066:  BCF    03.5
0067:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
00A1:  BCF    20.0
00A2:  MOVF   20,W
00A3:  BSF    03.5
00A4:  MOVWF  07
....................    lcd_rs_tris();
00A5:  BCF    03.5
00A6:  BCF    20.2
00A7:  MOVF   20,W
00A8:  BSF    03.5
00A9:  MOVWF  07
....................    lcd_rw_tris();
00AA:  BCF    03.5
00AB:  BCF    20.1
00AC:  MOVF   20,W
00AD:  BSF    03.5
00AE:  MOVWF  07
....................   #endif
.................... 
....................    lcd_output_rs(0);
00AF:  BCF    03.5
00B0:  BCF    07.2
00B1:  BCF    20.2
00B2:  MOVF   20,W
00B3:  BSF    03.5
00B4:  MOVWF  07
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00FF:  MOVF   78,W
0100:  MOVWF  45
0101:  BTFSS  45.7
0102:  GOTO   105
0103:  BSF    03.5
0104:  GOTO   0B5
....................    lcd_output_rs(address);
0105:  MOVF   43,F
0106:  BTFSS  03.2
0107:  GOTO   10A
0108:  BCF    07.2
0109:  GOTO   10B
010A:  BSF    07.2
010B:  BCF    20.2
010C:  MOVF   20,W
010D:  BSF    03.5
010E:  MOVWF  07
....................    delay_cycles(1);
010F:  NOP
....................    lcd_output_rw(0);
0110:  BCF    03.5
0111:  BCF    07.1
0112:  BCF    20.1
0113:  MOVF   20,W
0114:  BSF    03.5
0115:  MOVWF  07
....................    delay_cycles(1);
0116:  NOP
....................    lcd_output_enable(0);
0117:  BCF    03.5
0118:  BCF    07.0
0119:  BCF    20.0
011A:  MOVF   20,W
011B:  BSF    03.5
011C:  MOVWF  07
....................    lcd_send_nibble(n >> 4);
011D:  BCF    03.5
011E:  SWAPF  44,W
011F:  MOVWF  45
0120:  MOVLW  0F
0121:  ANDWF  45,F
0122:  MOVF   45,W
0123:  MOVWF  46
0124:  CALL   02E
....................    lcd_send_nibble(n & 0xf);
0125:  MOVF   44,W
0126:  ANDLW  0F
0127:  MOVWF  45
0128:  MOVWF  46
0129:  CALL   02E
012A:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
012B:  MOVLW  28
012C:  MOVWF  3C
012D:  MOVLW  0C
012E:  MOVWF  3D
012F:  MOVLW  01
0130:  MOVWF  3E
0131:  MOVLW  06
0132:  MOVWF  3F
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0133:  BCF    07.0
0134:  BCF    20.0
0135:  MOVF   20,W
0136:  BSF    03.5
0137:  MOVWF  07
....................    lcd_output_rs(0);
0138:  BCF    03.5
0139:  BCF    07.2
013A:  BCF    20.2
013B:  MOVF   20,W
013C:  BSF    03.5
013D:  MOVWF  07
....................    lcd_output_rw(0);
013E:  BCF    03.5
013F:  BCF    07.1
0140:  BCF    20.1
0141:  MOVF   20,W
0142:  BSF    03.5
0143:  MOVWF  07
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0144:  BCF    03.5
0145:  BCF    20.4
0146:  MOVF   20,W
0147:  BSF    03.5
0148:  MOVWF  07
....................    output_drive(LCD_DATA5);
0149:  BCF    03.5
014A:  BCF    20.5
014B:  MOVF   20,W
014C:  BSF    03.5
014D:  MOVWF  07
....................    output_drive(LCD_DATA6);
014E:  BCF    03.5
014F:  BCF    20.6
0150:  MOVF   20,W
0151:  BSF    03.5
0152:  MOVWF  07
....................    output_drive(LCD_DATA7);
0153:  BCF    03.5
0154:  BCF    20.7
0155:  MOVF   20,W
0156:  BSF    03.5
0157:  MOVWF  07
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0158:  BCF    03.5
0159:  BCF    20.0
015A:  MOVF   20,W
015B:  BSF    03.5
015C:  MOVWF  07
....................    lcd_rs_tris();
015D:  BCF    03.5
015E:  BCF    20.2
015F:  MOVF   20,W
0160:  BSF    03.5
0161:  MOVWF  07
....................    lcd_rw_tris();
0162:  BCF    03.5
0163:  BCF    20.1
0164:  MOVF   20,W
0165:  BSF    03.5
0166:  MOVWF  07
....................  #endif
....................     
....................    delay_ms(15);
0167:  MOVLW  0F
0168:  BCF    03.5
0169:  MOVWF  40
016A:  CALL   01A
....................    for(i=1;i<=3;++i)
016B:  MOVLW  01
016C:  MOVWF  3B
016D:  MOVF   3B,W
016E:  SUBLW  03
016F:  BTFSS  03.0
0170:  GOTO   179
....................    {
....................        lcd_send_nibble(3);
0171:  MOVLW  03
0172:  MOVWF  46
0173:  CALL   02E
....................        delay_ms(5);
0174:  MOVLW  05
0175:  MOVWF  40
0176:  CALL   01A
0177:  INCF   3B,F
0178:  GOTO   16D
....................    }
....................    
....................    lcd_send_nibble(2);
0179:  MOVLW  02
017A:  MOVWF  46
017B:  CALL   02E
....................    delay_ms(5);
017C:  MOVLW  05
017D:  MOVWF  40
017E:  CALL   01A
....................    for(i=0;i<=3;++i)
017F:  CLRF   3B
0180:  MOVF   3B,W
0181:  SUBLW  03
0182:  BTFSS  03.0
0183:  GOTO   190
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0184:  MOVLW  3C
0185:  ADDWF  3B,W
0186:  MOVWF  04
0187:  BCF    03.7
0188:  MOVF   00,W
0189:  MOVWF  40
018A:  CLRF   43
018B:  MOVF   40,W
018C:  MOVWF  44
018D:  CALL   0A1
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
018E:  INCF   3B,F
018F:  GOTO   180
0190:  BCF    0A.3
0191:  BCF    0A.4
0192:  GOTO   30A (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0193:  DECFSZ 40,W
0194:  GOTO   196
0195:  GOTO   199
....................       address=LCD_LINE_TWO;
0196:  MOVLW  40
0197:  MOVWF  41
0198:  GOTO   19A
....................    else
....................       address=0;
0199:  CLRF   41
....................      
....................    address+=x-1;
019A:  MOVLW  01
019B:  SUBWF  3F,W
019C:  ADDWF  41,F
....................    lcd_send_byte(0,0x80|address);
019D:  MOVF   41,W
019E:  IORLW  80
019F:  MOVWF  42
01A0:  CLRF   43
01A1:  MOVF   42,W
01A2:  MOVWF  44
01A3:  CALL   0A1
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01A4:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... 
.................... void lcd_putc(char s)
.................... {
....................    switch (s)
01A5:  MOVF   3E,W
01A6:  XORLW  0C
01A7:  BTFSC  03.2
01A8:  GOTO   1B0
01A9:  XORLW  06
01AA:  BTFSC  03.2
01AB:  GOTO   1B8
01AC:  XORLW  02
01AD:  BTFSC  03.2
01AE:  GOTO   1BE
01AF:  GOTO   1C3
....................    {
....................       case '\f' : lcd_send_byte(0,1);
01B0:  CLRF   43
01B1:  MOVLW  01
01B2:  MOVWF  44
01B3:  CALL   0A1
....................       delay_ms(2);
01B4:  MOVLW  02
01B5:  MOVWF  40
01B6:  CALL   01A
....................       break;
01B7:  GOTO   1C8
....................       
....................       case '\n' : lcd_gotoxy(1,2); break;
01B8:  MOVLW  01
01B9:  MOVWF  3F
01BA:  MOVLW  02
01BB:  MOVWF  40
01BC:  CALL   193
01BD:  GOTO   1C8
....................       
....................       case '\b' : lcd_send_byte(0,0x10); break;
01BE:  CLRF   43
01BF:  MOVLW  10
01C0:  MOVWF  44
01C1:  CALL   0A1
01C2:  GOTO   1C8
....................       
....................       default : lcd_send_byte(1,s); break;
01C3:  MOVLW  01
01C4:  MOVWF  43
01C5:  MOVF   3E,W
01C6:  MOVWF  44
01C7:  CALL   0A1
....................    }
01C8:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... //!#use i2c(Master,Fast=1000000, sda=PIN_C4, scl=PIN_C3,force_sw)
.................... //!#include "i2c_Flex_LCD.c"
.................... #include "DHT11.c"
.................... #define _DHT11_H_
.................... //!#include <def_877a.h>
.................... #use delay(crystal=20M)
*
0221:  MOVLW  4E
0222:  MOVWF  04
0223:  BCF    03.7
0224:  MOVF   00,W
0225:  BTFSC  03.2
0226:  GOTO   234
0227:  MOVLW  06
0228:  MOVWF  78
0229:  CLRF   77
022A:  DECFSZ 77,F
022B:  GOTO   22A
022C:  DECFSZ 78,F
022D:  GOTO   229
022E:  MOVLW  7B
022F:  MOVWF  77
0230:  DECFSZ 77,F
0231:  GOTO   230
0232:  DECFSZ 00,F
0233:  GOTO   227
0234:  RETURN
.................... 
.................... 
.................... //!#bit rb0 =0x06.0
.................... #BIT DHT_DATA_OUT = 0x06.0
.................... #BIT DHT_DATA_IN = 0x06.0
.................... //!#bit TRISB0 =0x86.0 
.................... #BIT DHT_DDR_DATA = 0x86.0
.................... 
.................... #define DHT_ER 0
.................... #define DHT_OK 1
.................... 
.................... #define DDROUT 0
.................... #define DDRIN 1
.................... 
.................... unsigned int8 DHT_GetTemHumi (unsigned int8 &tem1, , &tem2, unsigned int8 &humil, &humi2);
.................... 
.................... unsigned int8 DHT_GetTemHumi (unsigned int8 &tem1,&tem2, unsigned int8 &humi1, &humi2)
.................... { 
....................    unsigned int8 buffer[5]={0,0,0,0,0};
*
0329:  CLRF   3E
032A:  CLRF   3F
032B:  CLRF   40
032C:  CLRF   41
032D:  CLRF   42
....................    unsigned int8 ii,i,checksum;
....................    DHT_DDR_DATA=DDROUT;    // set la cong ra
032E:  BSF    03.5
032F:  BCF    06.0
....................    DHT_DATA_OUT=1;
0330:  BCF    03.5
0331:  BSF    06.0
....................    delay_us(60);
0332:  MOVLW  63
0333:  MOVWF  77
0334:  DECFSZ 77,F
0335:  GOTO   334
0336:  GOTO   337
....................    DHT_DATA_OUT=0;
0337:  BCF    06.0
....................    delay_ms(25); // it nhat 18ms
0338:  MOVLW  19
0339:  MOVWF  4E
033A:  CALL   221
....................    DHT_DATA_OUT=1;
033B:  BSF    06.0
....................    DHT_DDR_DATA=DDRIN;//set la cong vao
033C:  BSF    03.5
033D:  BSF    06.0
....................    
....................    delay_us(60);
033E:  MOVLW  63
033F:  MOVWF  77
0340:  DECFSZ 77,F
0341:  GOTO   340
0342:  GOTO   343
....................    if(DHT_DATA_IN) return DHT_ER;
0343:  BCF    03.5
0344:  BTFSS  06.0
0345:  GOTO   34A
0346:  MOVLW  00
0347:  MOVWF  78
0348:  GOTO   39A
0349:  GOTO   34C
....................    else while(!(DHT_DATA_IN)); //Doi DaTa len 1
034A:  BTFSS  06.0
034B:  GOTO   34A
....................    delay_us(60);//cho 60us
034C:  MOVLW  63
034D:  MOVWF  77
034E:  DECFSZ 77,F
034F:  GOTO   34E
0350:  GOTO   351
....................    if(!DHT_DATA_IN) return DHT_ER;
0351:  BTFSC  06.0
0352:  GOTO   357
0353:  MOVLW  00
0354:  MOVWF  78
0355:  GOTO   39A
0356:  GOTO   359
....................    else while((DHT_DATA_IN)); //Doi Data ve 0
0357:  BTFSC  06.0
0358:  GOTO   357
....................     //Bat dau doc du lieu
....................     for(i=0;i<5;i++) 
0359:  CLRF   44
035A:  MOVF   44,W
035B:  SUBLW  04
035C:  BTFSS  03.0
035D:  GOTO   384
....................     {
....................       for(ii=0;ii<8;ii++) 
035E:  CLRF   43
035F:  MOVF   43,W
0360:  SUBLW  07
0361:  BTFSS  03.0
0362:  GOTO   382
....................       {
....................          while((!DHT_DATA_IN));              // Doi Data len 1
0363:  BTFSS  06.0
0364:  GOTO   363
....................          delay_us(50);
0365:  MOVLW  53
0366:  MOVWF  77
0367:  DECFSZ 77,F
0368:  GOTO   367
....................          if(DHT_DATA_IN)
0369:  BTFSS  06.0
036A:  GOTO   380
....................          {
....................             buffer[i]|=(1<<(7-ii));
036B:  MOVLW  3E
036C:  ADDWF  44,W
036D:  MOVWF  04
036E:  BCF    03.7
036F:  MOVF   43,W
0370:  SUBLW  07
0371:  MOVWF  78
0372:  MOVLW  01
0373:  MOVWF  77
0374:  MOVF   78,F
0375:  BTFSC  03.2
0376:  GOTO   37B
0377:  BCF    03.0
0378:  RLF    77,F
0379:  DECFSZ 78,F
037A:  GOTO   377
037B:  MOVF   77,W
037C:  IORWF  00,W
037D:  MOVWF  00
....................             while((DHT_DATA_IN));
037E:  BTFSC  06.0
037F:  GOTO   37E
....................          }
0380:  INCF   43,F
0381:  GOTO   35F
....................       }
0382:  INCF   44,F
0383:  GOTO   35A
....................     }
....................    checksum=buffer[0]+buffer[1]+buffer[2]+buffer[3]; 
0384:  MOVF   3F,W
0385:  ADDWF  3E,W
0386:  ADDWF  40,W
0387:  ADDWF  41,W
0388:  MOVWF  45
....................    if((checksum) !=buffer[4])return DHT_ER; 
0389:  MOVF   42,W
038A:  SUBWF  45,W
038B:  BTFSC  03.2
038C:  GOTO   390
038D:  MOVLW  00
038E:  MOVWF  78
038F:  GOTO   39A
....................    tem1 = buffer[2];//gia tri phan nguyen 
0390:  MOVF   40,W
0391:  MOVWF  23
....................    tem2 = buffer[3];//gia tri phan thap phan
0392:  MOVF   41,W
0393:  MOVWF  24
....................    humi1 = buffer[0];//gia tri phan nguyen 
0394:  MOVF   3E,W
0395:  MOVWF  25
....................    humi2 = buffer[1];//gia tri phan thap phan
0396:  MOVF   3F,W
0397:  MOVWF  26
....................    return DHT_OK;
0398:  MOVLW  01
0399:  MOVWF  78
.................... }
.................... 
.................... //!
.................... //!
.................... //!#include <def_877a.h>
.................... //!#bit ra0 =0x05.0
.................... //!#bit TRISA0 =0x85.0
.................... //!#device *=16 adc=8
.................... //!#define  Data_Pin       Pin_D4                      // ket noi voi chan RD0
.................... //!#define  Data_Pin_TRIS  SET_TRIS_D                // dieu khien chan data la output hay input 
.................... //!
.................... //!int8 Data_DHT11[5];
.................... //!
.................... //!int1 DHT11_Start(){    // start
.................... //!   Data_Pin_TRIS(0);   // MCU output
.................... //!   Output_low(Data_Pin);        // MCU keo chan data xuong muc thap >18 ms
.................... //!   delay_ms(25);
.................... //!   Output_high(Data_Pin);        // MCU keo chan data len muc cao 
.................... //!   Data_Pin_TRIS(0xff);   // MCU input doi tin hieu tra ve cua DHT11 khoang 20 - 40 us
.................... //!   delay_us(40);
.................... //!   if(input(Data_Pin) == 0){    //DHT11 keo chan data xuong thap 80 us sau do keo len cao 80 us --> xac nhan ket noi
.................... //!      delay_us(80);
.................... //!      if(input(Data_Pin) == 1){
.................... //!         delay_us(80);
.................... //!         return 1;         // xac nhan ket noi thanh cong
.................... //!      }
.................... //!   }
.................... //!}
.................... //! 
.................... //!
.................... //!int1 ReadData_DHT11(){       // doc data cua DHT11 tra ve
.................... //!    for(int i = 0; i < 5; i++){        // data: 5 byte
.................... //!      for(int j = 0; j < 8; j++){      // 1 byte 8 bit   tong 40 bit
.................... //!         // data
.................... //!         while(input(Data_Pin) == 0){};      // chay het 50us muc thap
.................... //!         delay_us(30);              //  hon 26-28us van la muc cao --> DHT11 chuyen di muc 1
.................... //!         if(input(Data_Pin) == 1){  
.................... //!               Data_DHT11[i] = Data_DHT11[i]<<1 | 1;
.................... //!               while(input(Data_Pin) == 1){} // chay het 70us muc cao
.................... //!         }
.................... //!         else{                   // tra ve bit 0
.................... //!            Data_DHT11[i] = Data_DHT11[i]<<1 | 0;
.................... //!         }
.................... //!      }   
.................... //!    }
.................... //!    // ------- kiem tra byte 5 = sum(byte 1 + 2 + 3 + 4) --> chuyen data thanh cong. nguoc lai 
.................... //!    if(Data_DHT11[4] == (Data_DHT11[0] + Data_DHT11[1] + Data_DHT11[2] + Data_DHT11[3])){
.................... //!      return 1;
.................... //!    }
.................... //!}
.................... //!
.................... //!
.................... //!
.................... //!
.................... //!void HienThi_Data_DHT11(){
.................... //!    //------------------in ket qua-----------------------------------------------
.................... //!    //in nhiet do
.................... //! 
.................... //!    
.................... //!    lcd_init(0x4E,16,2);
.................... //!    printf(lcd_putc, "Nhiet do = "); 
.................... //!    for(int i = 13; i > 11; i--){
.................... //!       lcd_gotoxy(i,1);       //hien thi hang don vi truoc >hang chuc
.................... //!       printf(lcd_putc, "%d", Data_DHT11[2] % 10 + 48); 
.................... //!       Data_DHT11[2]=Data_DHT11[2] / 10;
.................... //!    }
.................... //!    //in do am
.................... //!    lcd_gotoxy(1,2);
.................... //!    printf(lcd_putc, "Do am = ");  
.................... //!    for(int i = 13; i > 11; i--){ 
.................... //!       lcd_gotoxy(i,2);   
.................... //!       printf(lcd_putc, "%d", Data_DHT11[0] % 10 + 48); //hien thi hang don vi truoc >hang chuc  //doi ra so thap phan +48 
.................... //!       Data_DHT11[0]=Data_DHT11[0] / 10;
.................... //!    }
.................... //!      //hien thi don vi nhiet do va do am 
.................... //!    LCD_Gotoxy(14,1);   
.................... //!    LCD_putc(223);
.................... //!    LCD_putc('C');
.................... //!    LCD_Gotoxy(14,2);   
.................... //!    LCD_putc('%');
.................... //!}
.................... 
.................... 
.................... 
.................... 
.................... void main() { 
*
02F9:  MOVF   03,W
02FA:  ANDLW  1F
02FB:  MOVWF  03
02FC:  MOVLW  FF
02FD:  MOVWF  20
02FE:  CLRF   22
02FF:  CLRF   21
0300:  BSF    03.5
0301:  BSF    1F.0
0302:  BSF    1F.1
0303:  BSF    1F.2
0304:  BCF    1F.3
0305:  MOVLW  07
0306:  MOVWF  1C
0307:  BCF    03.7
....................    //khai bao bien cuc bo o day
....................    unsigned int8 dh_nhiet_do,dh_nhiet_do2,dh_do_am,dh_do_am2;
....................    unsigned int8 str[20];
....................    
.................... //!   lcd_init(0x40,16,2);
.................... //!   lcd_backlight_led(ON); 
....................    lcd_init();
0308:  BCF    03.5
0309:  GOTO   12B
....................    lcd_putc('\f'); 
030A:  MOVLW  0C
030B:  MOVWF  3E
030C:  CALL   1A5
....................    lcd_gotoxy(1,1); 
030D:  MOVLW  01
030E:  MOVWF  3F
030F:  MOVWF  40
0310:  CALL   193
....................    printf(lcd_putc,"READING DHT11");
0311:  MOVLW  04
0312:  BSF    03.6
0313:  MOVWF  0D
0314:  MOVLW  00
0315:  MOVWF  0F
0316:  BCF    03.6
0317:  GOTO   1C9
....................    delay_ms(500); 
0318:  MOVLW  02
0319:  MOVWF  3B
031A:  MOVLW  FA
031B:  MOVWF  4E
031C:  CALL   221
031D:  DECFSZ 3B,F
031E:  GOTO   31A
....................    delay_ms(500); 
031F:  MOVLW  02
0320:  MOVWF  3B
0321:  MOVLW  FA
0322:  MOVWF  4E
0323:  CALL   221
0324:  DECFSZ 3B,F
0325:  GOTO   321
....................    lcd_putc('\f');
0326:  MOVLW  0C
0327:  MOVWF  3E
0328:  CALL   1A5
....................    
....................    while(TRUE) {
....................    //TO00: User Code 
....................       if (DHT_GetTemHumi(dh_nhiet_do,dh_nhiet_do2,dh_do_am,dh_do_am2))
*
039A:  MOVF   78,F
039B:  BTFSC  03.2
039C:  GOTO   3EB
....................       { 
....................          sprintf(str,"DO Am: %u,%u",dh_do_am,dh_do_am2);
039D:  CLRF   22
039E:  MOVLW  27
039F:  MOVWF  21
03A0:  MOVLW  0B
03A1:  BSF    03.6
03A2:  MOVWF  0D
03A3:  MOVLW  00
03A4:  MOVWF  0F
03A5:  BCF    03.0
03A6:  MOVLW  07
03A7:  BCF    03.6
03A8:  MOVWF  3B
03A9:  CALL   242
03AA:  MOVF   25,W
03AB:  MOVWF  3B
03AC:  MOVLW  1B
03AD:  MOVWF  3C
03AE:  CALL   2AE
03AF:  MOVLW  2C
03B0:  MOVWF  3F
03B1:  CALL   235
03B2:  MOVF   26,W
03B3:  MOVWF  3B
03B4:  MOVLW  1B
03B5:  MOVWF  3C
03B6:  CALL   2AE
....................          lcd_gotoxy(1,1); 
03B7:  MOVLW  01
03B8:  MOVWF  3F
03B9:  MOVWF  40
03BA:  CALL   193
....................          printf(lcd_putc,"%s",str); 
03BB:  MOVLW  27
03BC:  MOVWF  04
03BD:  BCF    03.7
03BE:  CALL   2E3
....................          lcd_putc('%'); 
03BF:  MOVLW  25
03C0:  MOVWF  3E
03C1:  CALL   1A5
....................          sprintf(str,"NHIET D0: %u,%u",dh_nhiet_do,dh_nhiet_do2);
03C2:  CLRF   22
03C3:  MOVLW  27
03C4:  MOVWF  21
03C5:  MOVLW  12
03C6:  BSF    03.6
03C7:  MOVWF  0D
03C8:  MOVLW  00
03C9:  MOVWF  0F
03CA:  BCF    03.0
03CB:  MOVLW  0A
03CC:  BCF    03.6
03CD:  MOVWF  3B
03CE:  CALL   242
03CF:  MOVF   23,W
03D0:  MOVWF  3B
03D1:  MOVLW  1B
03D2:  MOVWF  3C
03D3:  CALL   2AE
03D4:  MOVLW  2C
03D5:  MOVWF  3F
03D6:  CALL   235
03D7:  MOVF   24,W
03D8:  MOVWF  3B
03D9:  MOVLW  1B
03DA:  MOVWF  3C
03DB:  CALL   2AE
....................          lcd_gotoxy(1,2); 
03DC:  MOVLW  01
03DD:  MOVWF  3F
03DE:  MOVLW  02
03DF:  MOVWF  40
03E0:  CALL   193
....................          printf(lcd_putc,"%s",str); 
03E1:  MOVLW  27
03E2:  MOVWF  04
03E3:  BCF    03.7
03E4:  CALL   2E3
....................          lcd_putc(223); 
03E5:  MOVLW  DF
03E6:  MOVWF  3E
03E7:  CALL   1A5
....................          lcd_putc('C'); 
03E8:  MOVLW  43
03E9:  MOVWF  3E
03EA:  CALL   1A5
....................       }
....................       delay_ms(500);
03EB:  MOVLW  02
03EC:  MOVWF  3B
03ED:  MOVLW  FA
03EE:  MOVWF  4E
03EF:  CALL   221
03F0:  DECFSZ 3B,F
03F1:  GOTO   3ED
03F2:  GOTO   329
....................    }
....................   
.................... } 
03F3:  SLEEP

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
